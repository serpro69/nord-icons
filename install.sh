#!/usr/bin/env bash
#
# ARG_OPTIONAL_SINGLE([icons-path],[p],[destination directory path for icons],[~/.local/share/icons])
# ARG_OPTIONAL_BOOLEAN([copy],[],[whether to copy generated icons 'icons-path' destination])
# ARG_HELP([generates and copies nord-icons])
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.9.0 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info
# Generated online by https://argbash.io/generate

die() {
  local _ret="${2:-1}"
  test "${_PRINT_HELP:-no}" = yes && print_help >&2
  echo "$1" >&2
  exit "${_ret}"
}

begins_with_short_option() {
  local first_option all_short_options='ph'
  first_option="${1:0:1}"
  test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_icons_path="$HOME/.local/share/icons"
_arg_copy="off"

print_help() {
  printf '%s\n' "generates and copies nord-icons"
  printf 'Usage: %s [-p|--icons-path <arg>] [--(no-)copy] [-h|--help]\n' "$0"
  printf '\t%s\n' "-p, --icons-path: destination directory path for icons (default: '$HOME/.local/share/icons')"
  printf '\t%s\n' "--copy, --no-copy: whether to copy generated icons 'icons-path' destination (off by default)"
  printf '\t%s\n' "-h, --help: Prints help"
}

parse_commandline() {
  while test $# -gt 0; do
    _key="$1"
    case "$_key" in
    -p | --icons-path)
      test $# -lt 2 && die "Missing value for the optional argument '$_key'." 1
      _arg_icons_path="$2"
      shift
      ;;
    --icons-path=*)
      _arg_icons_path="${_key##--icons-path=}"
      ;;
    -p*)
      _arg_icons_path="${_key##-p}"
      ;;
    --no-copy | --copy)
      _arg_copy="on"
      test "${1:0:5}" = "--no-" && _arg_copy="off"
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
    -h*)
      print_help
      exit 0
      ;;
    *)
      _PRINT_HELP=yes die "FATAL ERROR: Got an unexpected argument '$1'" 1
      ;;
    esac
    shift
  done
}

parse_commandline "$@"

# OTHER STUFF GENERATED BY Argbash

### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash

set -o pipefail
set -eE

## keep track of the last executed command
# shellcheck disable=SC2154
trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
## echo an error message before exiting
# shellcheck disable=SC2154
trap 'printf "\e[31m%s: %s\e[m\n" "\"${last_command}\" failed with exit code" $?.' ERR

# logging helper
function log() {
  local level="$1"
  local text="$2"

  local color=""
  local NC="\033[0m" # No Color

  case $level in
  INFO | info)
    color="\033[0;36m"
    ;;
  WARN | warn)
    color="\033[0;33m"
    ;;
  ERROR | error)
    color="\033[0;31m"
    ;;
  *)
    color="\033[0;37m"
    ;;
  esac

  local now=""
  now=$(date +"%d-%m-%Y %H:%M:%S")

  echo -e "$color$now [${level^^}] $text$NC"
}

_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

if [[ "${_dir}" != "$(pwd)" ]]; then
  cd "${_dir}" || exit 9
fi

log "INFO" "sync candy-icons submodule"
git submodule sync

log "INFO" "copy candy-icons to out dir"
rm -rf out
mkdir -p out
cp -r candy-icons out/nord-icons

log "INFO" "rename the icon theme to 'nord-icons'"
sed -i 's/Name=.*/Name=nord-icons/' out/nord-icons/index.theme

log "INFO" "run main.go"
go run .

if [[ "$_arg_copy" == "on" ]]; then
  log "INFO" "copy generated icons to $_arg_icons_path"
  mkdir -p "$_arg_icons_path"
  cp -r out/nord-icons "$_arg_icons_path"/.

  log "INFO" "copy custom icons to $_arg_icons_path"
  cp -r nord-icons/* "$_arg_icons_path"/nord-icons/.
fi
